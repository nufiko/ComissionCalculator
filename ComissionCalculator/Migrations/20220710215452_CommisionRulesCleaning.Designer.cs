// <auto-generated />
using System;
using ComissionCalculator.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComissionCalculator.Migrations
{
    [DbContext(typeof(ComissionDbContext))]
    [Migration("20220710215452_CommisionRulesCleaning")]
    partial class CommisionRulesCleaning
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.ComissionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProductRule")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("ComissionRules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ComissionRule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.RuleTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Bottom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RuleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Top")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleTiers");
                });

            modelBuilder.Entity("ComissionCalculator.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Comission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ComissionCalculator.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("ComissionCalculator.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ComissionCalculator.Models.SalesPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalesPeople");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.CapComissionRule", b =>
                {
                    b.HasBaseType("ComissionCalculator.Models.ComissionRules.ComissionRule");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("CapComissionRule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.FlatComissionRule", b =>
                {
                    b.HasBaseType("ComissionCalculator.Models.ComissionRules.ComissionRule");

                    b.Property<bool>("IsPerUnit")
                        .HasColumnType("bit");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FlatComissionRule_Value");

                    b.HasDiscriminator().HasValue("FlatComissionRule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.PercentageComissionRule", b =>
                {
                    b.HasBaseType("ComissionCalculator.Models.ComissionRules.ComissionRule");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PercentageComissionRule_Value");

                    b.HasDiscriminator().HasValue("PercentageComissionRule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.TieredComissionRule", b =>
                {
                    b.HasBaseType("ComissionCalculator.Models.ComissionRules.ComissionRule");

                    b.Property<bool>("IsPerUnit")
                        .HasColumnType("bit")
                        .HasColumnName("TieredComissionRule_IsPerUnit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit")
                        .HasColumnName("TieredComissionRule_IsPercentage");

                    b.HasDiscriminator().HasValue("TieredComissionRule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.ComissionRule", b =>
                {
                    b.HasOne("ComissionCalculator.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ComissionCalculator.Models.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.RuleTier", b =>
                {
                    b.HasOne("ComissionCalculator.Models.ComissionRules.TieredComissionRule", "Rule")
                        .WithMany("Tiers")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("ComissionCalculator.Models.Invoice", b =>
                {
                    b.HasOne("ComissionCalculator.Models.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("ComissionCalculator.Models.InvoiceItem", b =>
                {
                    b.HasOne("ComissionCalculator.Models.Invoice", "Invoice")
                        .WithMany("Products")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComissionCalculator.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ComissionCalculator.Models.Invoice", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ComissionCalculator.Models.ComissionRules.TieredComissionRule", b =>
                {
                    b.Navigation("Tiers");
                });
#pragma warning restore 612, 618
        }
    }
}
